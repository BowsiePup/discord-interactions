declare module "@discord-interactions/api" {
// Generated by dts-bundle-generator v6.12.0

import Client from '@discord-interactions/request';
import { APIApplication, RESTGetAPIApplicationCommandsResult, RESTGetAPICurrentUserConnectionsResult, RESTGetAPICurrentUserGuildsQuery, RESTGetAPICurrentUserGuildsResult, RESTGetAPIGuildQuery, RESTPatchAPIApplicationCommandJSONBody, RESTPatchAPICurrentUserJSONBody, RESTPatchAPIInteractionFollowupJSONBody, RESTPostAPIApplicationCommandsJSONBody, RESTPostAPICurrentUserCreateDMChannelJSONBody, RESTPostAPIInteractionFollowupJSONBody, RESTPutAPIApplicationCommandsJSONBody, RESTPutAPIApplicationCommandsResult, Snowflake } from 'discord-api-types/v10';

export function getApplicationCommands(this: DiscordApiClient, applicationId: Snowflake, guildId?: Snowflake): Promise<RESTGetAPIApplicationCommandsResult>;
export function postApplicationCommand(this: DiscordApiClient, applicationId: Snowflake, command: RESTPostAPIApplicationCommandsJSONBody, guildId?: Snowflake): Promise<import("discord-api-types/v10").APIApplicationCommand>;
export function putApplicationCommands(this: DiscordApiClient, applicationId: Snowflake, commands: RESTPutAPIApplicationCommandsJSONBody, guildId?: Snowflake): Promise<RESTPutAPIApplicationCommandsResult>;
export function patchApplicationCommand(this: DiscordApiClient, applicationId: Snowflake, commandId: Snowflake, command: RESTPatchAPIApplicationCommandJSONBody, guildId?: Snowflake): Promise<import("discord-api-types/v10").APIApplicationCommand>;
export function deleteApplicationCommand(this: DiscordApiClient, applicationId: Snowflake, commandId: Snowflake, guildId?: Snowflake): Promise<unknown>;
export function getGuild(this: DiscordApiClient, id: Snowflake, query?: RESTGetAPIGuildQuery): Promise<import("discord-api-types/v10").APIGuild>;
export function postInteractionFollowup(this: DiscordApiClient, applicationId: Snowflake, interactionToken: string, data: RESTPostAPIInteractionFollowupJSONBody): Promise<import("discord-api-types/v10").APIMessage>;
export function patchInteractionFollowup(this: DiscordApiClient, applicationId: Snowflake, interactionToken: string, id: string, data: RESTPatchAPIInteractionFollowupJSONBody): Promise<import("discord-api-types/v10").APIMessage>;
export function deleteInteractionFollowup(this: DiscordApiClient, applicationId: Snowflake, interactionToken: string, id: string): Promise<never>;
export function getCurrentBotApplication(this: DiscordApiClient): Promise<APIApplication>;
export function getUser(this: DiscordApiClient, userId?: Snowflake): Promise<import("discord-api-types/v10").APIUser>;
export function getCurrentUser(this: DiscordApiClient): Promise<import("discord-api-types/v10").APIUser>;
export function modifyCurrentUser(this: DiscordApiClient, data: RESTPatchAPICurrentUserJSONBody): Promise<import("discord-api-types/v10").APIUser>;
export function getCurrentUserConnections(this: DiscordApiClient): Promise<RESTGetAPICurrentUserConnectionsResult>;
export function getCurrentUserGuilds(this: DiscordApiClient, query?: RESTGetAPICurrentUserGuildsQuery): Promise<RESTGetAPICurrentUserGuildsResult>;
export function getCurrentUserGuildMember(this: DiscordApiClient, guildId: Snowflake): Promise<import("discord-api-types/v10").APIGuildMember>;
export function leaveGuild(this: DiscordApiClient, guildId: Snowflake): Promise<void>;
export function createDm(this: DiscordApiClient, userId: Snowflake): Promise<RESTPostAPICurrentUserCreateDMChannelJSONBody>;
export class DiscordApiClient extends Client {
	get userAgent(): string;
	set userAgent(value: string);
	getApplicationCommands: typeof getApplicationCommands;
	putApplicationCommands: typeof putApplicationCommands;
	postApplicationCommand: typeof postApplicationCommand;
	patchApplicationCommand: typeof patchApplicationCommand;
	deleteApplicationCommand: typeof deleteApplicationCommand;
	getGuild: typeof getGuild;
	postInteractionFollowup: typeof postInteractionFollowup;
	patchInteractionFollowup: typeof patchInteractionFollowup;
	deleteInteractionFollowup: typeof deleteInteractionFollowup;
	getUser: typeof getUser;
	getCurrentUser: typeof getCurrentUser;
	modifyCurrentUser: typeof modifyCurrentUser;
	getCurrentUserConnections: typeof getCurrentUserConnections;
	getCurrentUserGuilds: typeof getCurrentUserGuilds;
	getCurrentUserGuildMember: typeof getCurrentUserGuildMember;
	leaveGuild: typeof leaveGuild;
	createDm: typeof createDm;
	getCurrentBotApplication: typeof getCurrentBotApplication;
}

export {};
}
